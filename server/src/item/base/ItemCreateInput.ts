/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsNumber,
  IsOptional,
  IsEnum,
  IsString,
  ValidateNested,
} from "class-validator";
import { EnumItemCategory } from "./EnumItemCategory";
import { InventoryItemCreateNestedManyWithoutItemsInput } from "./InventoryItemCreateNestedManyWithoutItemsInput";
import { Type } from "class-transformer";
import { PlantWhereUniqueInput } from "../../plant/base/PlantWhereUniqueInput";
@InputType()
class ItemCreateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  cashPrice?: number | null;

  @ApiProperty({
    required: false,
    enum: EnumItemCategory,
  })
  @IsEnum(EnumItemCategory)
  @IsOptional()
  @Field(() => EnumItemCategory, {
    nullable: true,
  })
  category?: "seed" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  creditsPrice?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  displayName?: string | null;

  @ApiProperty({
    required: false,
    type: () => InventoryItemCreateNestedManyWithoutItemsInput,
  })
  @ValidateNested()
  @Type(() => InventoryItemCreateNestedManyWithoutItemsInput)
  @IsOptional()
  @Field(() => InventoryItemCreateNestedManyWithoutItemsInput, {
    nullable: true,
  })
  inventoryItem?: InventoryItemCreateNestedManyWithoutItemsInput;

  @ApiProperty({
    required: false,
    type: () => PlantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PlantWhereUniqueInput)
  @IsOptional()
  @Field(() => PlantWhereUniqueInput, {
    nullable: true,
  })
  plant?: PlantWhereUniqueInput;
}
export { ItemCreateInput };
