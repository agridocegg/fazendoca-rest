/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { CropListRelationFilter } from "../../crop/base/CropListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { InventoryItemListRelationFilter } from "../../inventoryItem/base/InventoryItemListRelationFilter";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
@InputType()
class FarmWhereInput {
  @ApiProperty({
    required: false,
    type: () => CropListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CropListRelationFilter)
  @IsOptional()
  @Field(() => CropListRelationFilter, {
    nullable: true,
  })
  crops?: CropListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  displayName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => InventoryItemListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InventoryItemListRelationFilter)
  @IsOptional()
  @Field(() => InventoryItemListRelationFilter, {
    nullable: true,
  })
  inventoryItems?: InventoryItemListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  owner?: UserWhereUniqueInput;
}
export { FarmWhereInput };
